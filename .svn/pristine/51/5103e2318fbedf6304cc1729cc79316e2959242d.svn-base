/* $Id$  */
//////////////////////////////////////////////////////////////////////////
///	COPYRIGHT NOTICE
///	Copyright (c) 2011, Asiainfo Linkage Technologies(China),Inc.   （版权声明）
///	All rights reserved.
///
/// file	（本文件的文件名eg：srm_rdc_mgr.h）
/// brief
///				平台数据管理器
///
///
/// version 1.1	（版本声明）
/// author		（作者，eg：fanxiaojun）
/// date		（文件创建日期，eg：2012-4-19）
///
/// version 2.1
/// author       （eg: kongll）
/// date          (eg:2014-11-20)
///
///	修订说明：ng版本
//////////////////////////////////////////////////////////////////////////

#ifndef __SRM_RDC_MGR_H___
#define __SRM_RDC_MGR_H___

#include "dbe2_typedef.h"
#include "dbe2_base_mgr.h"
#include "dbe_base_def_sdl_c.h"
#include "rdc_table_def_sdl_c.h"
#include "rdc_def_sdl_c.h"
#include "dbm_def_sdl_c.h"
#include "public/ob_kernel/ob_kernel.h"

namespace MDbe
{

enum RECORD_STATE
{
    ORI_STATUS = 1,
    AUTO_MERGE = 2,
    MANA_MERGE = 3,
};


/**
 * 平台数据管理器
 */
class ISrmRdcMgr : public IBaseMgr
{
public:
    enum RDC_STATUS
    {
        ALL_STATUS_ = -100
    };

public:

    /**
     * 获取管理类的实例
     * @return 返回实例
     */
    static ISrmRdcMgr & GetInstance();
    /**
     * 判断进程是否退出
     */
    virtual bool IsStop() = 0;

    /**
     * 更新srm主机心跳
     */
    virtual bool UpdateHostHeartbeat() = 0;
    virtual void InsertHostLogout() = 0;

    /**
     * 按照APP ID查询信息
     */
    virtual bool QueryApp(int32 iAppId, CRdcApp &rcApp) = 0;

    /**
     * 查询app配置
     */
    virtual bool QueryAppConfig(int32 iAppId, aistring &rstrConfig) = 0;

    /**
     * 查询app_param配置
     */
    virtual bool QueryAppParamConfig(int32 iAppId, aistring &rstrConfig) = 0;

    /**
     * 更新App状态
     */
    virtual bool UpdateAppState(CRdcApp &rcApp) = 0;
    virtual bool UpdateJobRunAppState(CRdcJobRunStepApp &cRdcJobRunStepApp) = 0;

    /**
     * 按照APP ID查找相关的进程信息
     */
    virtual void QueryProcByApp(int32 iAppId, CRdcProcList &rlstProc) = 0;

    /**
     * 插入App操作
     * @param rcAppOperate app操作信息
     */
    virtual void InsertAppOperate(CRdcAppOperate &rcAppOperate) = 0;

    /**
     * 插入流历史操作
     * @param rcAppOperate app操作信息
     */
    virtual void InsertAppOperateHis(CRdcAppOperateHis &rcAppOperateHis) = 0;

    /**
     * 获得APP的操作信息
     * @param iAppId APP编号
     * @param iTransId 事务编号
     * @param rcAppOperate 流程操作
     * @return 查询结果
     */
    virtual bool QueryAppOperate(int32 iAppId, int32 iTransId, CRdcAppOperate &rcAppOperate) = 0;

    /**
     * 获得APP的操作信息
     * @param rcExeProc 进程操作
     * @param iVmId 虚拟机编号
     * @param rcAppOperate 流程操作
     * @return 查询结果
     */
    virtual bool QueryAppOperateByProc(SBaseExeProc &rcExeProc, int32 iVmId, CRdcAppOperate &rcAppOperate) = 0;

    /**
     * 删除APP操作信息
     * 并且将操作信息放入历史表
     * @param iAppId APP ID
     * @param iSequence 消息序号
     * @return 删除结果
     */
    virtual bool DeleteAppOperate(int32 iAppId, int32 iTransId) = 0;

    /**
     * 生成一个事务编号
     * @return 事务编号
     */
    virtual int32 GetProcTransId(void) = 0;

    /**
     * 插入事务操作信息
     * @param rcCreateTrans 事务创建时候信息，包含事务信息和事务操作信息
     */
    virtual void InsertTransInfo(SRdcCreateTrans &rcCreateTrans) = 0;

    /**
     * 更新事务信息
     * @param cUpProcTrans 更新的事务信息
     */
    virtual void UpdateTransInfo(CRdcProcTrans &cUpProcTrans) = 0;

    /**
     * 按照事务ID删除事务以及相关的事务操作
     * 并且将数据加入到历史表
     * @param iTransId
     */
    virtual void DeleteTransInfo(int32 iTransId) = 0;

    /**
     * 只更新操作启动时候信息
     * 只修改OPERATE_START_TIME，OPERATE_TIMEOUT_TIME，OPERATE_RETRY_COUNT，OPERATE_RESULT
     * @param rcProcOperateList
     */
    virtual void UpdateProcOperate(CRdcProcTransOperateList &rcProcOperateList) = 0;

    /**
     * 查询中RDC中App相关的事务列表
     * @param iAppId 查询的App ID
     * @param rcTrans （out） 返回流程相关的事务
     */
    virtual void QueryTransByApp(int32 iAppId, CRdcProcTransList &rlstProcTrans) = 0;

    /**
     * 更新事务操作，并且查询统一优先级以及更低优先的事务操作
     * 并且接口实现按照优先级排序，高优先级的操作在前
     * @param rcProcOperate 更新内容
     * @param rlstProcOperate 事务中进程操作列表
     */
    virtual void UpdateAndQueryOperate(CRdcProcTransOperate &rcProcOperate,
                                       CRdcProcTransOperateList &rlstProcOperate) = 0;

    /**
     * 根据当前的事务ID查询事务详细信息
     * @param iTransId 事务ID
     * @param rcProcTrans 事务详细信息
     * @return 查询结果，true为查找成功
     */
    virtual bool QueryTransById(int32 iTransId, CRdcProcTrans &rcProcTrans) = 0;

    /**
     * 根据当前的事务ID查询事务操作详细信息
     * @param iTransId 事务ID
     * @param rcProcTransList 事务操作详细信息
     */
    virtual void QueryTransOperateById(int32 iTransId, CRdcProcTransOperateList &rcProcTransOperateList) = 0;

    /**
     * 查询是否有超时的操作
     * @param rcCompareTime
     * @param rlstProcOperate
     */
    virtual void QueryTimeOutOperate(const CBSDateTime &rcCompareTime,
                                     CRdcProcTransOperateList &rlstProcOperate) = 0;

    /**
     * 清除冗余的事务操作
     * @param iAppId app ID
     */
    virtual void DeleteRedundantProcOperate(int32 iAppId) = 0;

    /**
     * 增加事务错误信息
     * @param iTransId 事务ID
     * @param rstrError 错误信息
     */
    virtual void MergeTransErrorInfo(int32 iTransId, aistring &rstrError) = 0;

    /**
     * 按照app ID查询流程详细信息
     * @param rcAppIdSet 流程ID列表
     * @param rcAppList 流程详细信息列表
     */
    virtual void QueryAppList(CInt32Set &rcAppIdSet, CRdcAppList &rcAppList) = 0;

    /**
     * 插入进程信息
     * @param rcProc 进程信息
     */
    virtual void InsertProcInfo(CRdcProc &rcProc) = 0;

    /**
     * 更新进程信息
     * @param rcProc 需要更新进程的详细信息
     */
    virtual void UpdateProcInfo(CRdcProc &rcProc) = 0;
    virtual void UpdateProcListState(CRdcProcList& rProcList, int32 iState) = 0;

    /**
     * 按照进程key查询进程信息
     * @param rcProcKey 进程key
     * @param rcProc 出参，进程详细信息
     */
    virtual bool QueryProcInfobyProc(SBaseProcKey &rcProcKey, CRdcProc &rcProc) = 0;
    virtual bool QueryProcHisInfobyProc(SBaseProcKey &rcProcKey, int32 rcPid, CRdcProcHis &rcProcHis) = 0;
    /**
     * 删除进程信息
     * @param iAppId app ID
     * @param iProcId 进程ID
     */
    virtual void DeleteProcInfo(int32 iAppId, int32 iProcId, int32 iVmId) = 0;

    /**
     * 更新进程信息并且查询同服务的进程信息
     * @param rcProc 更新的进程信息
     * @param rcProcList 出参：返回的进程信息列表
     */
    virtual void UpdateAndQueryProcInfo(CRdcProc &rcProc, CRdcProcList &rcProcList) = 0;

    /**
     * 查询中RDC中进程对应的操作
     * @param rcProcKey 进程key
     * @param iVmId 虚拟机ID
     * @param iOperateType 操作类型
     * @param 出参，进程操作
     * @return 返回查询结果，true：查找成功；false：查找失败
     */
    virtual bool QueryProcOperate(SBaseProcKey &rcProcKey, int32 iVmId, int32 iOperateType,
                                  CRdcProcTransOperate &rcProcOperate) = 0;

    virtual void InsertProcBackLog(CRdcProcBacklogList &rlstInsertInfo) = 0;

    virtual void InsertProcHandleRate(CRdcProcHandleRateList &rlstRateInfo) = 0;

    virtual int32 QuerySameCbParamTrans(aistring strCbParam) = 0;

    virtual bool CheckJobAppCompleteBySequence(int64 jobInsSequence, int32 appId) = 0;


public:
    /**
     * 根据vmid 查询虚拟机记录
     * @param iVmId 虚拟机ID
     * @param 出参，虚拟机记录
     * @return 返回查询结果，true：查找成功；false：查找失败
     */
    virtual bool GetPdcVm(int32 iVmId, CPdcVm& rcPdcVm) = 0;
    /**
     * 更新虚拟机静态信息
     * @param rcPdcVm 更新信息
     */
    virtual void UpdateVmStaticInfo(CPdcVm& rcPdcVm) = 0;
    /**
     * 更新虚拟机轨迹
     */
    virtual void InsertVmStateModifyLog(CRdcVmStateModifyLog& rModifyLog) = 0;
    /**
     * 根据状态查询虚拟机列表
     * @return
     */
    virtual bool GetVmList(int32 iNrmConnectState, int32 iVmState, CPdcVmList& lstVmList) = 0;
    virtual bool GetLuaScript(AISTD string& rScriptName, AISTD string& rScritpContent) = 0;
    virtual void GetClusterVmRelationByVm(int32 iVmId, CPdcClusterVmRelationList &rClusterVmRelationList) = 0;
    virtual bool GetClusterVmRelation(int32 iClusterId, CPdcClusterVmRelationList &rClusterVmRelationList) = 0;
    virtual bool CheckVmTransExistence(int32 iVmId) = 0;
    virtual bool GetProcByVm(int32 iVmId, CRdcProcList& rRdcProcList) = 0;
    virtual void GetClusterRelyApp(int32 iClusterId, CPdcClusterAppRelationList& rClusterAppRelationList) = 0;
    virtual int32 GetAppMaxProcId(int32 iAppId, int32 iflag = 0) = 0;
public:
    virtual bool GetVmStateRecord(int32 iVmId, CRdcVmStateRecord& rVmStateRecord) = 0;
    virtual void InsertVmDynamicInfo(CRdcVmStateRecord& rcVmStateRecord) = 0;
    virtual void InsertVmProcInfo(int32 iVmId, CRdcProcStateRecordList& rcProcStateRecordList) = 0;
    virtual void DeleteVmProcCache(int32 iVmId) = 0;
    virtual bool GetProcStateRecord(int32 iVmId, CRdcProcStateRecordList& rProcStateRecorList) = 0;
    virtual bool ClearVmUpdateTime(int32 iVmId) = 0;
    virtual bool SetVmUpdateTime(int32 iVmId, CBSDateTime &cUpdateTime) = 0;
    virtual bool QueryUpdateTime(int32 iVmId, CBSDateTime &cUpdateTime) = 0;

    /**
     * 删除冗余信息接口
     */
    virtual void DeleteRedundantData(int32 iInterver)  = 0;

    /**
     	* 动态信息写入数据库
     	*/
    virtual void WriteRecordToDb() = 0;

    /**
     * 获取JOB不执行的信息
     */
    virtual void GetJobVacationList(int32 iJobId, CRdcJobVacationList &rjobVacationList) = 0;

    /**
    * 设置jobflow信息
    * @param  in rcFlowId 流程id
    * @param out rcRdcJobFlow 流程信息
    */
    virtual void GetJobAppInfo(SJobAppId& rcAppId, CRdcJobRunStepApp& rcRdcJobApp) = 0;
    virtual void GetJobAppInfoByApp(SBaseProcKey& rcProcKey, CRdcJobRunStepApp& rcRdcJobApp) = 0;

    /**
         * 获取job实例相关信息
         * @param in  iJobInsId
         * @param out rcJobInfo Job信息容器
         * @return
         */
    virtual void GetJobInfo(int32 iJobInsId, CRdcJobIns& rcJobInfo) = 0;

    /**
    * 设置job信息
    * @param  in rcData 新信息
    * @param in rcCond 条件字段
    */
    virtual void SetJobInfo(CRdcJobIns& rcData, CRdcJobIns& rcCond) = 0;

    /**
    * 获取指定环节信息
    * @param in  rcStepId			环节id
    * @param out rcRdcJobRunStep	出参，环节信息
    */
    virtual void GetStepInfo(SStepId& rcStepId, CRdcJobRunStep& rcRdcJobRunStep) = 0;

    /**
    * 设置step信息
    * @param rcData
    * @param rcCond
    */
    virtual void SetStepInfo(CRdcJobRunStep& rcData, CRdcJobRunStep& rcCond) = 0;

    /**
    * 获取当前环节前一个环节[可能多个]
    * @param in  rcStepId		当前环节信息，包括任务id和环节id
    * @param out rcStepIdSet	出参，获取到的前面的环节集合
    */
    virtual void GetPreSteps(SStepId& rcStepId, SStepIdSet& rcStepIdSet)  = 0;

    /**
    * 根据环节获取环节下的流程信息
    * @param rcStepId
    * @param rcJobFlowIdList
    * @return
    */
    virtual void GetAppsByStep(SStepId& rcStepId, SJobAppIdList& rcJobAppIdList) = 0;

    /**
    * 获取下一个环节[可能多个]
    * @param in  rcStepId		当前环节信息，包括任务id和环节id
    * @param out rcStepIdSet	出参，获取到的next环节集
    */
    virtual void GetNextSteps(SStepId& rcStepId, SStepIdSet& rcStepIdSet) = 0;

    virtual void RefreshJobInfo(int32 iJobInsId) = 0;
    virtual bool BackUpJobInfo(int32 iJobInsId) = 0;

    /**
    * 获取某种状态的所有环节
    * @param in  iJobId 		任务id
    * @param out rcStepIdList  出参，获取到的某种状态的环节集合
    * @param in  iStatus  		需获取的环节的状态
    */
    virtual void GetJobStepByStatus(int32 iJobId, SStepIdList& rcStepIdList, int32 iStepStatus = ALL_STATUS_) = 0;
    virtual void GetJobStepByStatus(int32 iJobId, CRdcJobRunStepList& rcSteplist, int32 iStepStatus = ALL_STATUS_) = 0;

    /**
    * 获取系统参数
    */
    virtual bool GetSysParam(aistring& sParamName, bool bDefaultValue) = 0;

    /**
    * 获取系统参数
    */
    virtual int32 GetSysParam(aistring& sParamName, int32 iDefaultValue) = 0;

    /**
    * 获取系统参数
    */
    virtual aistring GetSysParam(aistring& sParamName, const char * pDefaultValue) = 0;

    /**
    * 生成job的shecule
    */
    virtual void AutoAddJobSchedule() = 0;
    virtual void DeleteInvalidJobData() = 0;

    virtual void GetJobSchedule(CRdcJobScheduleList& rJobScheduleList) = 0;
    virtual void GetLastSchedule(int32 iJobInsId, CRdcJobSchedule& rJobSchedule) = 0;
    virtual void ParaseTime(aistring szCronTime, time_t time_in, time_t& time_out) = 0;
    virtual void UpdateShedule(CRdcJobSchedule& rApdJobSchedule, CRdcJobSchedule& rmCond, CBSDateTime validTime, CBSDateTime expiryTime) = 0;

    /**
    * 获得next jobId
    * @param listJobRelation
    * @return
    */
    virtual int32 GetNextJob(int32 ijobId, CRdcJobRelationList& listJobRelation) = 0;

    virtual int32 GetPrevJob(int32 ijobId, CRdcJobRelationList& listJobRelation) = 0;

    /**
    * 获取环节的某种状态的所有流程信息
    * @param in  iJobId			任务id
    * @param out rcJobFlowIdList	出参，获取到的某种状态的流程集合
    * @param in  iFlowStatus		需获取的流程的状态
    */
    virtual void GetStepAppByStatus(SStepId& rcStepId, SJobAppIdList& rcJobAppIdList, int32 iAppStatus = ALL_STATUS_) = 0;
    virtual void GetStepAppByStatus(SStepId& rcStepId, CRdcJobRunStepAppList& rcJobRunStepAppList, int32 iAppStatus = ALL_STATUS_) = 0;

    /**
    * 获取任务的某种状态的所有流程信息
    * @param in  iJobId			任务id
    * @param out rcJobFlowIdList	出参，获取的任务流程集合
    * @param in  iFlowStatus		流程状态
    */
    virtual void GetJobAppByStatus(int32 iJobId, SJobAppIdList& rcJobAppIdList, int32 iAppStatus = ALL_STATUS_) = 0;

    /**
    * 启动job时获得首批次的流程
    * @param in iJobInsId			任务id
    * @param out rJobFlowIdList	出参，流程集合
    */
    virtual void GetHeadSteps(int32 iJobInsId, SStepIdList& rStepIdList) = 0;

    /**
    * 获取JOB中符合条件的step
    */
    virtual void GetJobSteps(CRdcJobRunStep cStepCond, CRdcJobRunStepList &rStepList) = 0;

    /**
    * 设置任务流程状态
    * @param in rcJobFlowId	任务流程信息
    * @param in iJobFlowStatus 任务流程状态
    */
    virtual void SetJobAppInfo(CRdcJobRunStepApp& rcJobApp, CRdcJobRunStepApp& rcCond) = 0;
	virtual bool GetStep(int32 rcStepId, CSoStep& cStep) = 0;

    virtual int64 InsertWarnOri(CAmWarnRecordOri &rWarnOri) = 0;
    virtual bool QueryWarnRecord(CAmWarnRecord &rWarnRecord, CAmWarnRecord &rWarnCond) = 0;

    virtual void InsertWarnDetail(CAmWarnRecordDetail &rcDetail) = 0;

    virtual bool QueryJobAppInfo(int32 iAppId, CRdcJobRunStepApp& rcRdcJobFlow) = 0;
    virtual bool QueryMergeInfo(CAmWarnMergerHis &cMergeInfo, int64 iRecordId) = 0;

    virtual int64 InsertWarnRecord(CAmWarnRecord &rWarnRecord) = 0;
    virtual bool QueryFirstWarnDetail(CAmWarnRecordDetail &cWarnDetail, int64 iRecordId) = 0;
    virtual void UpdateWarnRecord(CAmWarnRecord &rUpdateInfo, int64 iRecordId) = 0;
    virtual void UpdateMergeInfo(CAmWarnMergerHis &cMergeInfo, int64 iMergeId) = 0;
    virtual void InsertMergeDetail(CAmWarnMergerHisDetail &cMergeDetail) = 0;
    virtual void InsertMergeDetail(CAmWarnMergerHisDetailList &listMergeDetail) = 0;
    virtual int64 InsertMergeInfo(CAmWarnMergerHis &cMergeInfo) = 0;
	virtual void InsertWarnSmsDetail(CAmWarnSmsDetail &cWarnSmsDetail)=0;
	virtual bool GetWarnLevelDefine(int32 rcWarnLevelId, CAmWarnLevelDefine& cWarnLevel) = 0;
	virtual bool GetWarnInsDefine(int32 rcWarnId, CAmWarnInsDefine& cWarnIns)=0;
    /**
    * 更新升级信息
    */
    virtual void UpdateUpgradeInfo(int32 iOpId, CRdcPuOp &rcUpOperate) = 0;

    /**
    * 插入升级信息
    */
    virtual void InsertUpgradeInfo(CRdcPuOp &rcUpOperate, CRdcPuOpDetailList &rcVmDetailList) = 0;

    /**
    * 更新升级详细信息
    */
    virtual void UpdateUpgradeDetailInfo(int32 iOpId, int32 iVmId, CRdcPuOpDetail &rcUpInfo) = 0;

    /**
    * 获取正在软件升级的主机信息
    */
    virtual void QueryUpgradeDetail(int32 iOpId, CRdcPuOpDetailList &rcVmDetailList) = 0;

    /**
    * 产生软件升级编号
    * @return 软件升级编号
    */
    virtual int32 GetPuOpId(void) = 0;

    /**
     * 查看正在软件的信息
     */
    virtual bool QueryUpgrateInfoByOpId(int32 iOpId, CRdcPuOp &rcUpOp) = 0;

    /**
    * 查看正在软件的信息
    */
    virtual void GetCurrentUpgrateInfo(CRdcPuOpList &rcUpOpList) = 0;

    /**
    * 更新主机版本
    */
    virtual bool UpdateVmVersion(CPdcPuVmVersion &rcVmVersion) = 0;

    /**
    * 删除主机版本
    */
    virtual bool DeleteVmVersion(CPdcPuVmVersion &rcVmVersion) = 0;
public:
    /**
     * 查询进程，并且按照应用Id，进程ID升序排列
     */
    virtual void QueryProcByVmOrder(int32 iVmId, CRdcProcList  &rProcList) = 0;
    virtual void QueryProcListByCond(CRdcProc rcCond, CRdcProcList &rcProcList) = 0;
};

} // namespace MDbe


#endif /* __SRM_RDC_MGR_H___ */
