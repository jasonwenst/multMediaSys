//////////////////////////////////////////////////////////////////////////
///	COPYRIGHT NOTICE
///	Copyright (c) 2011, Asiainfo Linkage Technologies(China),Inc.   （版权声明）
///	All rights reserved.
///
/// file	（本文件的文件名eg：msg_dispatch_mgr.cpp）
/// brief
///
///
///
/// version 1.1	（版本声明）
/// author		（作者，eg：fanxiaojun）
/// date		（文件创建日期，eg：2012-4-16）
///
///
///	修订说明：最初版本
//////////////////////////////////////////////////////////////////////////

#include "msg_dispatch_mgr.h"
#include "msg_dispatch_mgr_impl.h"
#include "dbe2_util.h"
#include "dbe2_srm_msg_interface.h"

namespace MDbe
{

IMsgDispatchMgr & IMsgDispatchMgr::GetInstance()
{
    static CMsgDispatchMgr cMgr;
    return cMgr;
}

CMgrInitHelper::CMgrInitHelper(od_frame::CThread * pOdThread): m_pOdThread(pOdThread)
{

}

CMgrInitHelper::~CMgrInitHelper()
{

}

//通信指针列表
CSourceDataCmuApiMap CMsgHelper::m_cSourceDataCmuApiMap;
CLock CMsgHelper::m_cLock;

void CMsgHelper::SetRouteData(CSendSource & cSendSource, CSendTarget & cSendTarget, CRouteData & rRouteData)
{
    //设置发送源
    rRouteData.m_iSFlowId = cSendSource.m_iFlowId;
    rRouteData.m_iSSrvId = cSendSource.m_iSrvId;
    rRouteData.m_iSProcId = cSendSource.m_iProcId;
    rRouteData.m_iSVmId = cSendSource.m_iVmId;
    rRouteData.m_iSSrvType = cSendSource.m_iSrvType;

    //设置发送目标
    rRouteData.m_iTFlowId = cSendTarget.m_iFlowId;
    rRouteData.m_iTSrvId = cSendTarget.m_iSrvId;
    rRouteData.m_iTProcId = cSendTarget.m_iProcId;
    rRouteData.m_iTVmId = cSendTarget.m_iVmId;
    rRouteData.m_iSSrvType = cSendTarget.m_iSrvType;
}

od_frame:: CCommData * CMsgHelper::MakeCNotifyHead(CSendSource & cSendSource,
        CSendTarget & cSendTarget,
        int32 iMsgType, bool isFindComuApi)
{
    od_frame:: CCommData * pDestCommData = od_frame:: CCommData::alloc();
    pDestCommData->set_type(iMsgType);
    MDbe:: CRouteData * pMyRouteData
        = pDestCommData->TEMPLATE_MEMBER(CNotify) create_object<MDbe:: CRouteData>();

    SetRouteData(cSendSource, cSendTarget, *pMyRouteData);

    if(isFindComuApi)
    {
        //这里做一下转换,把要发送的目标转成SourceData结构,用于获取通讯指针
        CSourceData cMySourceData;
        cMySourceData.m_iSFlowId = cSendTarget.m_iFlowId;
        cMySourceData.m_iSSrvId = cSendTarget.m_iSrvId;
        cMySourceData.m_iSProcId = cSendTarget.m_iProcId;
        cMySourceData.m_iSVmId = cSendTarget.m_iVmId;
        cMySourceData.m_iSSrvType = cSendTarget.m_iSrvType;


        CSourceDataCmuApiMap cSourceDataCmuApiMap;
        try
        {
            GetSocket(cMySourceData, cSourceDataCmuApiMap);
        }
        catch(CAIException & e)
        {
            //发生异常,先删除申请出来的内存,再抛出去
            od_frame:: CCommData::dealloc(pDestCommData);
            
			throw e;
        }
        //组建发送列表
        DBE2_LOG(DEBUG_LOGGER, "get socket map size:%d", cSourceDataCmuApiMap.size());
        NAMESPACE_OD_FRAME CConnectionElem * pElement = pDestCommData;
        for(CSourceDataCmuApiMap::iterator it = cSourceDataCmuApiMap.begin();
                it != cSourceDataCmuApiMap.end();)
        {
            if(it->second.m_cCommunicateApi == NULL) continue;
            pElement->m_uCommApi.m_pCommunicateApi = it->second.m_cCommunicateApi;
            pElement->m_pNext = NULL;
            if(++it != cSourceDataCmuApiMap.end())
            {
                pElement->m_pNext = new NAMESPACE_OD_FRAME CConnectionElem();
                pElement = pElement->m_pNext;
            }
        }
    }
    return pDestCommData;
}

void CMsgHelper::ObtainSocket(const CSourceData& rcReqSourceData, CSourceDataCmuApiMap& rcSourceDataCmuApiMap,
		const CSourceData &rcSourceData, CCommunicateApiInfo & cCmuApi, const char * pFromInfo)
{
	rcSourceDataCmuApiMap[rcSourceData] = cCmuApi;
    DBE2_LOG(DEBUG_LOGGER, "get ip from socket(%p) by %s (procKey %d-%d-%d vm %d), req source data (procKey %d-%d-%d vm %d)",
    		cCmuApi.m_cCommunicateApi, pFromInfo, rcSourceData.m_iSFlowId,
    		rcSourceData.m_iSSrvId, rcSourceData.m_iSProcId, rcSourceData.m_iSVmId, rcReqSourceData.m_iSFlowId,
    		rcReqSourceData.m_iSSrvId, rcReqSourceData.m_iSProcId, rcReqSourceData.m_iSVmId);
}

void CMsgHelper::GetSocketBySrm(const CSourceData & rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end();
            ++it)
    {
        if(it->first.m_iSFlowId == -1
                && it->first.m_iSSrvId == PROC_SRM
                && it->first.m_iSProcId == 1
                && it->first.m_iSVmId != -1)
        {
            ObtainSocket(rcReqSourceData, rSourceDataCmuApiMap, it->first, it->second, "srm");
        }
    }
}

void CMsgHelper::GetSocketBySoJob(const MDbe:: CSourceData& rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end();
            ++it)
    {
        if(it->first.m_iSFlowId == -1
                && it->first.m_iSSrvId == PROC_DBM
                && it->first.m_iSProcId == 2
                && (rcReqSourceData.m_iSVmId == -1 || rcReqSourceData.m_iSVmId == it->first.m_iSVmId))
        {
            ObtainSocket(rcReqSourceData, rSourceDataCmuApiMap, it->first, it->second, "so job");
        }
    }
}

void CMsgHelper::GetSocketByDbm(const MDbe:: CSourceData& rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end();
            ++it)
    {
        if(it->first.m_iSFlowId == -1
                && it->first.m_iSSrvId == PROC_DBM
                && it->first.m_iSProcId == 1
                && (rcReqSourceData.m_iSVmId == -1 || rcReqSourceData.m_iSVmId == it->first.m_iSVmId))
        {
            ObtainSocket(rcReqSourceData, rSourceDataCmuApiMap, it->first, it->second, "dbm");
        }
    }
}

void CMsgHelper::GetSocketByTs(const MDbe:: CSourceData& rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
	GetSocketByProckey(rcReqSourceData, rSourceDataCmuApiMap);
	if(rSourceDataCmuApiMap.size() == 0)
	{
		GetSocketByVm(rcReqSourceData, rSourceDataCmuApiMap);
	}
}

void CMsgHelper::GetSocketByVm(const CSourceData& rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end();
            ++it)
    {
        if(it->first.m_iSFlowId == -1
                && it->first.m_iSSrvId == PROC_NRM
                && it->first.m_iSProcId == 1
                && (rcReqSourceData.m_iSVmId == -1 || rcReqSourceData.m_iSVmId == it->first.m_iSVmId))
        {
            ObtainSocket(rcReqSourceData, rSourceDataCmuApiMap, it->first, it->second, "vm");
        }
    }
}

void CMsgHelper::GetSocketByProckey(const MDbe:: CSourceData& rcReqSourceData,
        CSourceDataCmuApiMap& rSourceDataCmuApiMap)
{
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end();
            ++it)
    {
        if(it->first.m_iSFlowId == rcReqSourceData.m_iSFlowId
                && (rcReqSourceData.m_iSSrvId == -1 || rcReqSourceData.m_iSSrvId == it->first.m_iSSrvId)
                && (rcReqSourceData.m_iSProcId == -1 || rcReqSourceData.m_iSProcId == it->first.m_iSProcId)
                && (rcReqSourceData.m_iSVmId == -1 || rcReqSourceData.m_iSVmId == it->first.m_iSVmId)
                )
        {
            ObtainSocket(rcReqSourceData, rSourceDataCmuApiMap, it->first, it->second, "prockey");
        }
    }
}

CMsgHelper::CMsgHelper(od_frame::CThread * pOdThread, bool bDumpSendObbstream):
		m_pOdThread(pOdThread), m_bDumpSendObbstream(bDumpSendObbstream)
{

}

CMsgHelper::~CMsgHelper()
{

}

void CMsgHelper::Send(CSendSource & cSendSource, CSendTarget & cSendTarget, int32 iMsgType, obb_stream & cObbStream)
{
    DBE2_LOG(DEBUG_LOGGER, "CMsgHelper send msg to client![msg_type:%d, source:(flow_id=%d,srv_id=%d,proc_id=%d,vm_id=%d,srv_type:%d), "
             "target:(flow_id=%d,srv_id=%d,proc_id=%d,vm_id=%d,srv_type:%d)]",
             iMsgType, cSendSource.m_iFlowId, cSendSource.m_iSrvId, cSendSource.m_iProcId, cSendSource.m_iVmId, cSendSource.m_iSrvType,
             cSendTarget.m_iFlowId, cSendTarget.m_iSrvId, cSendTarget.m_iProcId, cSendTarget.m_iVmId, cSendTarget.m_iSrvType);
    if(m_bDumpSendObbstream)
    {
    	LogObbstream(cObbStream);
    }

    od_frame:: CCommData * pDestCommData = MakeCNotifyHead(cSendSource, cSendTarget, iMsgType, true);

    //保存obb_stream结构
    AISTD string strData = "";
    cObbStream.export_data(strData);//导出数据
    char * pObbBuf = pDestCommData->TEMPLATE_MEMBER(CNotify) alloc_object<char>(strData.size());
    memcpy(pObbBuf, strData.c_str(), strData.size());//拷贝size长度
    m_pOdThread->send_data(pDestCommData);
}


void CMsgHelper::Send(CSendTarget & cSendTarget, int32 iMsgType, obb_stream & cObbStream)
{
    CSendSource cSendSource;
    cSendSource.m_iFlowId = m_pOdThread->get_flowId();
    cSendSource.m_iSrvId = m_pOdThread->get_serviceId();
    cSendSource.m_iProcId = m_pOdThread->get_procId();
    cSendSource.m_iVmId = NAMESPACE_OD_SYSTEM get_vmId();
    Send(cSendSource, cSendTarget, iMsgType, cObbStream);
}


void CMsgHelper::Send(int32 iMsgType, obb_stream & cObbStream, bool bMyself)
{
    CSendTarget cSendTarget;
    cSendTarget.m_iFlowId = m_pOdThread->get_flowId();
    cSendTarget.m_iSrvId = m_pOdThread->get_serviceId();
    cSendTarget.m_iProcId = m_pOdThread->get_procId();
    cSendTarget.m_iVmId = NAMESPACE_OD_SYSTEM get_vmId();
    CSendSource cSendSource;
    cSendSource.m_iFlowId = m_pOdThread->get_flowId();
    cSendSource.m_iSrvId = m_pOdThread->get_serviceId();
    cSendSource.m_iProcId = m_pOdThread->get_procId();
    cSendSource.m_iVmId = NAMESPACE_OD_SYSTEM get_vmId();

    DBE2_LOG(DEBUG_LOGGER, "CMsgHelper send msg to self![msg_type:%d, source:(flow_id=%d,srv_id=%d,proc_id=%d,vm_id=%d,srv_type:%d), "
             "target:(flow_id=%d,srv_id=%d,proc_id=%d,vm_id=%d,srv_type:%d)]",
             iMsgType, cSendSource.m_iFlowId, cSendSource.m_iSrvId, cSendSource.m_iProcId, cSendSource.m_iVmId, cSendSource.m_iSrvType,
             cSendTarget.m_iFlowId, cSendTarget.m_iSrvId, cSendTarget.m_iProcId, cSendTarget.m_iVmId, cSendTarget.m_iSrvType);

    od_frame:: CCommData * pDestCommData = MakeCNotifyHead(cSendSource, cSendTarget, iMsgType, false);

    AISTD string strData = "";
    cObbStream.export_data(strData);//导出数据
    char * pObbBuf = pDestCommData->TEMPLATE_MEMBER(CNotify) alloc_object<char>(strData.size() + 1);
    memset(pObbBuf, 0x00, strData.size() + 1);
    memcpy(pObbBuf, strData.c_str(), strData.size());//拷贝size长度
    pDestCommData->m_uCommApi.m_pCommunicateApi = NULL;
    if(bMyself)
    {
        m_pOdThread->repeat_data(pDestCommData);
    }
    else
    {
        m_pOdThread->send_data(pDestCommData);
    }
}


void CMsgHelper::SendIntraMsg(CSendTarget & rSendTarget, CCommunicateApi* pCommunicateApi, int32 iMsgType)
{
    od_frame:: CCommData * pDestCommData = od_frame:: CCommData::alloc();
    pDestCommData->set_type(iMsgType);
    MDbe:: CRouteData * pMyRouteData
        = pDestCommData->TEMPLATE_MEMBER(CNotify) create_object<MDbe:: CRouteData>();
    pDestCommData->m_uCommApi.m_pCommunicateApi = pCommunicateApi;

    //设置发送源
    pMyRouteData->m_iSFlowId = m_pOdThread->get_flowId();
    pMyRouteData->m_iSSrvId = m_pOdThread->get_serviceId();
    pMyRouteData->m_iSProcId = m_pOdThread->get_procId();
    pMyRouteData->m_iSVmId = od_system::get_vmId();

    //设置发送目标
    pMyRouteData->m_iTFlowId = rSendTarget.m_iFlowId;
    pMyRouteData->m_iTSrvId = rSendTarget.m_iSrvId;
    pMyRouteData->m_iTProcId = rSendTarget.m_iProcId;
    pMyRouteData->m_iTVmId = rSendTarget.m_iVmId;
    pMyRouteData->m_iTSrvType = rSendTarget.m_iSrvType;

    //统一回复时,增加一个消息包,暂时没什么用
    MDbe:: CDbeCommApi *pDbeCommApi
        = pDestCommData->TEMPLATE_MEMBER(CNotify) alloc_object<MDbe:: CDbeCommApi>();

    pDbeCommApi->m_iRegisterStatus = 1;
    pDbeCommApi->m_iThreadId = pthread_self();
    memset(pDbeCommApi->m_szIp, 0, sizeof(pDbeCommApi->m_szIp));
    //todo:如果是151注册返回消息中,增加平台版本信息,java ts这边要求做版本判读,以后考虑更好的方法来放这个消息
    if(iMsgType == MSG_RSP_DBE_COMM_REG)
    {
        strcpy(pDbeCommApi->m_szIp, "cpf=2.5;");
    }

    m_pOdThread->send_data(pDestCommData);
}

void CMsgHelper::GetSocket(const MDbe:: CSourceData & rSourceData,
                           CSourceDataCmuApiMap & rSourceDataCmuApiMap)
{
    //锁
    CAutoLock cAutoLock(m_cLock);

    _GetSocket(rSourceData, rSourceDataCmuApiMap);

    if(0 == rSourceDataCmuApiMap.size())
    {
    	aistring strErrorInfo = FormatString("cannot get ip from socket(procKey %d-%d-%d vm %d)\n",
                 rSourceData.m_iSFlowId,
                 rSourceData.m_iSSrvId,
                 rSourceData.m_iSProcId,
                 rSourceData.m_iSVmId);
        int32 i = 0;
        for(CSourceDataCmuApiMap::iterator itrStart = m_cSourceDataCmuApiMap.begin();
                itrStart != m_cSourceDataCmuApiMap.end(); itrStart++, i++)
        {
        	strErrorInfo += FormatString("[%02d]exists source (%p) procKey %d-%d-%d vm %d, ip %s\n", i,
                     itrStart->second.m_cCommunicateApi,
                     itrStart->first.m_iSFlowId,
                     itrStart->first.m_iSSrvId,
                     itrStart->first.m_iSProcId,
                     itrStart->first.m_iSVmId,
                     itrStart->second.m_cCommunicateApi->get_peer());
        }
        //找不到SOCKET,通过异常来处理
        THROW_CAIEXCEPTION(E_MSG_DISPATCH_MSG_GET_SOCKET_FAIL, "?") << strErrorInfo;
    }
}


void CMsgHelper::_GetSocket(const MDbe:: CSourceData & rcReqSourceData,
                            CSourceDataCmuApiMap & rSourceDataCmuApiMap)
{

    //找的是SRM
    if(rcReqSourceData.m_iSFlowId == -1 &&
    		rcReqSourceData.m_iSSrvId == MDbe::PROC_SRM &&
    		rcReqSourceData.m_iSProcId == 1)
    {
        GetSocketBySrm(rcReqSourceData, rSourceDataCmuApiMap);
        return;
    }

    //找的是DBM
    if(rcReqSourceData.m_iSFlowId == -1 &&
    		rcReqSourceData.m_iSSrvId == MDbe::PROC_DBM &&
    		rcReqSourceData.m_iSProcId == 1)
    {
        GetSocketByDbm(rcReqSourceData, rSourceDataCmuApiMap);
        return;
    }

    //找的是SO JOB
    if(rcReqSourceData.m_iSFlowId == -1 &&
            rcReqSourceData.m_iSSrvId == MDbe::PROC_DBM &&
            rcReqSourceData.m_iSProcId == 2)
    {
        GetSocketBySoJob(rcReqSourceData, rSourceDataCmuApiMap);
        return;
    }

    //找的是TS
    GetSocketByTs(rcReqSourceData, rSourceDataCmuApiMap);
}

int32 CMsgHelper::SetSocket(MDbe:: CSourceData & rSourceData,
                            CCommunicateApi * pCommunicateApi, bool bServer)
{
    if(NULL == pCommunicateApi)
    {
        DBE2_LOG(ERROR_LOGGER, "get one register message(150),but cannot get ip from socket(source procKey %d-%d-%d vm %d)",
                 rSourceData.m_iSFlowId,
                 rSourceData.m_iSSrvId,
                 rSourceData.m_iSProcId,
                 rSourceData.m_iSVmId);
        return 0;
    }

    if(rSourceData.m_iSFlowId == -1 &&
            rSourceData.m_iSSrvId == 5 &&
            rSourceData.m_iSProcId == 1)
    {
        //如果是srm来的pcc线程,那么不去处理
        aistring strSrmIp = pCommunicateApi->get_peer();
        if(strSrmIp.find("127.0.0.1:") != aistring::npos)
        {
            DBE2_LOG(INFO_LOGGER, "get one register message(150),but is srm pcc connect skip it!(source (%p) procKey %d-%d-%d vm %d, ip %s)",
                    pCommunicateApi,
                    rSourceData.m_iSFlowId,
                    rSourceData.m_iSSrvId,
                    rSourceData.m_iSProcId,
                    rSourceData.m_iSVmId,
                    strSrmIp.c_str());
            return 0;
        }

    }
    //锁
    CAutoLock cAutoLock(m_cLock);

    CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.find(rSourceData);
    if(it != m_cSourceDataCmuApiMap.end())
    {
        DBE2_LOG(INFO_LOGGER, "close old communicate api, source (%p) procKey %d-%d-%d vm %d, ip %s",
                 it->second.m_cCommunicateApi,
                 rSourceData.m_iSFlowId,
                 rSourceData.m_iSSrvId,
                 rSourceData.m_iSProcId,
                 rSourceData.m_iSVmId,
                 it->second.m_cCommunicateApi->get_peer());
        CSendTarget cSendTarget(rSourceData.m_iSFlowId, rSourceData.m_iSSrvId, rSourceData.m_iSProcId,
                        rSourceData.m_iSVmId, rSourceData.m_iSSrvType);
        //发送152关闭消息
        SendIntraMsg(cSendTarget, it->second.m_cCommunicateApi, MSG_CLOSE_BY_NRM_REG);
    }
    DBE2_LOG(INFO_LOGGER, "one register message(150) arrive, map size (%d), source (%p) procKey %d-%d-%d vm %d, ip %s",
             m_cSourceDataCmuApiMap.size(),
             pCommunicateApi,
             rSourceData.m_iSFlowId,
             rSourceData.m_iSSrvId,
             rSourceData.m_iSProcId,
             rSourceData.m_iSVmId,
             pCommunicateApi->get_peer());

    CCommunicateApiInfo & rcCommunicateApiInfo = m_cSourceDataCmuApiMap[rSourceData];
    rcCommunicateApiInfo.m_cCommunicateApi = pCommunicateApi;
    rcCommunicateApiInfo.m_bServer = bServer;
    return 0;
}

CMsgAddr CMsgHelper::FindSourceByCCommunicateApi(CCommunicateApi * pCommunicateApi, bool isDelete)
{
    CMsgAddr rMsgAddr;

    if(NULL == pCommunicateApi)
    {
        //空数据
        return rMsgAddr;
    }

    //锁
    CAutoLock cAutoLock(m_cLock);
    for(CSourceDataCmuApiMap::iterator it = m_cSourceDataCmuApiMap.begin();
            it != m_cSourceDataCmuApiMap.end(); ++it)
    {
        if(it->second.m_cCommunicateApi == pCommunicateApi)
        {
            CMsgAddr cAddr = GetSourceMsgAddr(it->first);
            if(isDelete)
            {
                m_cSourceDataCmuApiMap.erase(it);
            }
            return cAddr;
        }
    }
    //空数据
    return rMsgAddr;
}

CMsgAddr CMsgHelper::Delete(CCommunicateApi * pCommunicateApi)
{
    return FindSourceByCCommunicateApi(pCommunicateApi, true);
}

CMsgAddr CMsgHelper::Connect(CCommunicateApi * pCommunicateApi)
{
    return FindSourceByCCommunicateApi(pCommunicateApi);
}

CMsgAddr CMsgHelper::Disconnect(CCommunicateApi * pCommunicateApi)
{
    return FindSourceByCCommunicateApi(pCommunicateApi);
}

CMsgAddr CMsgHelper::GetSourceMsgAddr(const MDbe:: CSourceData & rSourceData)
{
    CMsgAddr rMsgAddr;
    rMsgAddr.m_iFlowId = rSourceData.m_iSFlowId;
    rMsgAddr.m_iSrvId = rSourceData.m_iSSrvId;
    rMsgAddr.m_iProcId = rSourceData.m_iSProcId;
    rMsgAddr.m_iVmId = rSourceData.m_iSVmId;
    //采用服务类型当做数据路由信息，跟DBE_PROC_TYPE对应
    rMsgAddr.m_iSrvType = rSourceData.m_iSSrvType;
    return rMsgAddr;
}
} // namespace MDbe
