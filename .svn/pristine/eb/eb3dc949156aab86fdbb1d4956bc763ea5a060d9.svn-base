#ifndef _NR_API_MGR_H_
#define _NR_API_MGR_H_

#include "nr_api.h"
#include "dbe2_common_struct.h"

/**
	NR lib库外部引用头文件;提供对外接口函数，供操作NR使用.
*/
namespace MDbe
{
/**
 * @brief
 * 进程资源信息管理类(NRM专用)
 * 保存进程资源的增/删/改接口
 */
class CNrApiImpl : public CNrApi
{
public:
	CNrApiImpl(){}
	virtual ~CNrApiImpl(){}
private:
	CNrApiImpl(const CNrApiImpl& rh);
	CNrApiImpl& operator=(const CNrApiImpl& rh);
public:

	/**
	 * NR初始化接口;由其依附程序调用;应用不必关心
	 * @return 返回值：0:初始化成功；< 0:初始化失败
	*/
	virtual int32 NrInit(od_frame::CThread *pThread);

	/**
	 * 检查NR根目录是否存在，不存在则创建NR目录
	 * @return 返回值：0:初始化成功；< 0:初始化失败
	*/
	virtual int32 CheckNrRootPath();

	/**
	 * 创建NR目录
	 * @param objProcKey：进程唯一标识
	 * @return 返回值：0:创建成功；< 0:创建失败
	*/
	virtual int32 CreateProcNr(MDbe::CProcKey &rPk);

	/**
	 * 进程挂载接口
	 * @param objProcKey：进程唯一标识
	 * @return 返回值：0:挂载成功；< 0:挂载失败
	*/
	virtual int32 HoldNr(MDbe::CProcKey &rPk, const char* szCmd);

	/**
	 * 进程卸载接口
	 * @param objProcKey 进程id
	 * @return 返回值：0:卸载成功；< 0:卸载失败
	*/
	virtual int32 UnholdNr(MDbe::CProcKey& rPk);

	/**
	 * 设置进程脚本的信息
	 * 全量写入
	 */
	virtual int32 WriteProcCmds(MDbe::CProcKey &rPk, ListNrProcCmd &rlstProcCmd);

	/**
	 * 获取进程脚本的信息
	 */
	virtual int32 ReadProcCmd(MDbe::CProcKey &rPk, CNrProcCmd& rNrProcCmd, EmNrProcCmdType em);

	/**
	 * 设置PID
	 */
	virtual int32 WritePid(MDbe::CProcKey &rPk, int32 &iPid);

	/**
	 * 获取PID
	 */
	virtual int32 ReadPid(MDbe::CProcKey &rPk, int32 &iPid);

	/**
	 * 设置进程信息（进程状态nrm专用）
	 * @param rProcKey MDbe:: CProcKey 进程id
	 * @param rProcStat MDbe:: CProcStat 进程状态
	 * @return 0:成功，非0：失败，会导致进程退出
	 */
	virtual int32 WriteProcStatus(MDbe::CProcKey &rPk, MDbe:: CProcStat& rProcStat);

	/**
     * 读取进程信息（进程状态nrm专用）
     * @param rProcKey MDbe:: CProcKey 进程id
     * @param rProcStat CProcStat 进程状态
     * @return 0:成功，非0：失败，会导致进程退出
     */
	virtual int32 ReadProcStatus(MDbe::CProcKey &rPk, CProcStat& rProcStat);

	/**
	 * 设置进程信息（进程占用系统资源）
	 * @param rProcKey MDbe:: CProcKey 进程id
	 * @param rProcPid MDbe:: CProcPid 进程占用系统资源
	 * @return 0:成功，非0：失败，会导致进程退出
	 */
	virtual int32 WriteProcResoure(MDbe::CProcKey &rPk, MDbe:: CProcPid& rProcPid);

	/**
     * 读取进程信息（进程占用系统资源）
     * @param rProcKey MDbe:: CProcKey 进程id
     * @param rProcPid MDbe:: CProcPid 进程占用系统资源
     * @return 0:成功，非0：失败，会导致进程退出
     */
	virtual int32 ReadProcResoure(MDbe::CProcKey &rPk, MDbe:: CProcPid& rProcPid);

	/**
     * 读取全部进程信息（进程占用系统资源）
     * @param rProcPid MDbe:: CProcPid 进程占用系统资源
     * @return 0:成功，非0：失败，会导致进程退出
     */
	virtual int32 ReadAllProcKey(CProcKeyVec& rProcKeyVec);

	/**
     * 读取全部进程信息（进程占用系统资源）
     * @param rProcPid MDbe:: CProcPid 进程占用系统资源
     * @return 0:成功，非0：失败，会导致进程退出
     */
	virtual int32 ReadAllProcResource(ProcPidMap& rProcPidMap);
private:
	void RejectDualChar(char *rszData);
	const char* GetCmdName(EmNrProcCmdType em);
};

}

#endif	//_NR_API_MGR_H_
